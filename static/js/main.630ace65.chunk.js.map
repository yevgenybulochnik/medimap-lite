{"version":3,"sources":["components/table.tsx","components/markerTable.tsx","components/map.tsx","components/hcpcsCodeSuggest.tsx","components/chargeTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","styled","div","props","minWidth","TableContainer","Tr","Th","align","Td","Thead","Tbody","height","Pagination","PageInfo","PageInfoItem","span","Table","columns","data","onRowClick","paginate","useTable","initialState","pageSize","useSortBy","usePagination","useFlexLayout","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","previousPage","nextPage","pageCount","pageIndex","state","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","style","marginLeft","isSorted","isSortedDesc","icon","color","row","getRowProps","onClick","index","cells","cell","getCellProps","flex","minimal","fill","disabled","defaultProps","currencyFormatter","Intl","NumberFormat","currency","minimumFractionDigits","MarkerTable","React","useMemo","Header","accessor","width","Cell","format","value","console","log","defaultMarkericon","L","iconUrl","markerIcon","iconSize","iconAnchor","shadowUrl","markerShadow","shadowSize","shadowAnchor","popupAnchor","GeoMap","this","locationData","filteredLocations","datum","location_id","filter","d","includes","id","locationId","position","zoom","Map","center","scrollWheelZoom","TileLayer","url","attribution","maxClusterRadius","getLocations","location","Marker","gps","getMarkerData","Popup","maxWidth","autoClose","closeOnClick","Component","HcpcsCodeRenderer","hcpcsCode","desc","handleClick","modifiers","matchesPredicate","active","code","key","label","description","length","slice","text","hcpcsCodeFilter","query","isNaN","parseInt","toLowerCase","indexOf","HcpcsCodeSelect","Suggest","ofType","HcpcsCodeSuggest","hcpcsCodeItems","onItemSelect","helperText","items","resetOnSelect","itemRenderer","itemPredicate","inputValueRenderer","item","noResults","ChargeTable","Heading","Navbar","Divider","Group","App","useState","filteredData","setFilteredData","setPosition","setZoom","className","href","src","process","alt","elevation","Elevation","TWO","hcpcs_data","mergedData","charge_data","provider","provider_data","npi","location_data","e","loc","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.630ace65.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { Button, Icon } from '@blueprintjs/core'\nimport { useTable, useFlexLayout, usePagination, useSortBy } from 'react-table'\nimport 'react-perfect-scrollbar/dist/css/styles.css'\n\n\nconst Wrapper = styled.div<{minWidth?: string}>`\n  overflow: auto;\n  border: 1px solid #d4d3d3;\n  ${ props => props.minWidth && `\n    min-width: ${props.minWidth};\n    border-left: none;\n    border-right: none;\n  `}\n`\n\nconst TableContainer = styled.div`\n  width: 100%;\n`\n\nconst Tr = styled.div`\n  display: flex;\n  border-bottom: 1px solid #d4d3d3;\n`\n\nconst Th = styled.div<{align: string}>`\n  oveflow-y: auto;\n  overflow-x: hidden;\n  text-align: ${props => props.align || 'left'};\n  padding: 5px;\n`\n\nconst Td = styled.div<{align: string}>`\n  padding: 5px;\n  text-align: ${props => props.align || 'left'};\n`\n\nconst Thead = styled.div`\n  box-shadow: 0px 0px 15px rgba(0,0,0,0.2);\n  ${Th} {\n    border-right: 1px solid #d4d3d3;\n    &:last-child {\n      border-right: none;\n    }\n  }\n`\n\nconst Tbody = styled.div<{height: string}>`\n  height: ${props => props.height};\n  overflow-y: auto;\n  overflow-x: hidden;\n`\n\nconst Pagination = styled.div`\n  display: flex;\n  box-shadow: 0px 0px 5px rgba(0,0,0,0.2);\n  border-top: 1px solid #d4d3d3;\n`\nconst PageInfo = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n`\n\nconst PageInfoItem = styled.span`\n  flex: 1;\n  text-align: center;\n`\n\ninterface Props {\n  columns: any;\n  data: any;\n  height: string;\n  onRowClick: any;\n  paginate?: boolean;\n  minWidth?: string;\n}\n\nconst Table: React.SFC<Props> = (props) => {\n  const {\n    columns,\n    data,\n    height,\n    onRowClick,\n    minWidth,\n    paginate,\n  } = props\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    previousPage,\n    nextPage,\n    pageCount,\n    state: { pageIndex }\n  } = useTable({\n    columns,\n    data,\n    // @ts-ignore\n    initialState: { pageSize: 50 }\n  }, useSortBy, usePagination, useFlexLayout)\n\n  return (\n    <Wrapper minWidth={minWidth}>\n      <TableContainer {...getTableProps()}>\n        <Thead>\n          {headerGroups.map((headerGroup: any) => (\n          <Tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column: any) => (\n              <Th {...column.getHeaderProps({align: column.align})}>\n                <span {...column.getSortByToggleProps()}>\n                  {column.render('Header')}\n                  <span style={{marginLeft: '4px'}}>\n                    {column.isSorted ? column.isSortedDesc ? <Icon icon='sort-desc' color='grey'/> : <Icon icon='sort-asc' color='grey' /> : '' }\n                  </span>\n                </span>\n              </Th>\n            ))}\n          </Tr>\n        ))}\n        </Thead>\n        <Tbody {...getTableBodyProps()} height={height}>\n          <PerfectScrollbar>\n            {page.map((row: any) => {\n              prepareRow(row)\n              return (\n                <Tr {...row.getRowProps()} onClick={() => onRowClick(data[row.index])}>\n                  {row.cells.map((cell: any) => (\n                    <Td {...cell.getCellProps({align: cell.column.align})}>\n                      {cell.render('Cell')}\n                    </Td>\n                  ))}\n              </Tr>\n              )\n            })}\n          </PerfectScrollbar>\n        </Tbody>\n        { paginate &&\n          <Pagination>\n          <Button style={{flex: 1}} minimal fill onClick={previousPage} disabled={!canPreviousPage}>Previous</Button>\n            <PageInfo>\n            <PageInfoItem>{pageIndex + 1}</PageInfoItem>\n            <PageInfoItem>/</PageInfoItem>\n            <PageInfoItem>{pageCount}</PageInfoItem>\n            </PageInfo>\n          <Button style={{flex: 1}} minimal fill onClick={nextPage} disabled={!canNextPage}>Next</Button>\n          </Pagination>\n        }\n      </TableContainer>\n    </Wrapper>\n  )\n}\n\nTable.defaultProps = {\n  paginate: true,\n}\n\nexport default Table\n","import React from 'react'\nimport Table from './table'\n\n\nconst currencyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2,\n})\n\ninterface Props {\n  data: any;\n}\n\nconst MarkerTable: React.SFC<Props> = (props) => {\n  const {\n    data\n  } = props\n\n  const columns = React.useMemo(() => [\n    {\n      Header: 'Name',\n      accessor: 'name',\n      align: 'center',\n      width: 2,\n    },\n    {\n      Header: 'Creds',\n      accessor: 'credentials',\n      align: 'center',\n      width: 1,\n    },\n    {\n      Header: 'Charge Amt',\n      accessor: 'submittedCharge',\n      align: 'center',\n      width: 1,\n      Cell: (cell: any) => currencyFormatter.format(cell.value)\n    },\n    {\n      Header: 'Reimb Amt',\n      accessor: 'paymentAmt',\n      align: 'center',\n      width: 1,\n      Cell: (cell: any) => currencyFormatter.format(cell.value)\n    }\n  ], [])\n\n  return (\n    <Table\n      columns={columns}\n      data={data}\n      height=''\n      paginate={false}\n      onRowClick={() => console.log('Marker table clicked')}\n    />\n  )\n}\n\nexport default MarkerTable\n","import React from 'react'\nimport './map.scss'\nimport L from 'leaflet'\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport MarkerClusterGroup from 'react-leaflet-markercluster'\nimport MarkerTable from './markerTable'\nimport markerIcon from 'leaflet/dist/images/marker-icon.png'\nimport markerShadow from 'leaflet/dist/images/marker-shadow.png'\n\nconst defaultMarkericon = L.icon({\n  iconUrl: markerIcon,\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  shadowUrl: markerShadow,\n  shadowSize: [41, 41],\n  shadowAnchor: [12, 41],\n  popupAnchor: [0, -42],\n})\n\ninterface Props {\n  data: any[];\n  locationData: any[];\n  position: any;\n  zoom: number;\n}\n\nclass GeoMap extends React.Component<Props, {}> {\n\n  getLocations() {\n    const { data, locationData } = this.props\n    const filteredLocations = data.map((datum: any) => datum.location_id)\n    return locationData.filter((d: any) => filteredLocations.includes(d.id))\n  }\n\n  getMarkerData(locationId: number) {\n    const { data } = this.props\n    const markerData = data.filter((datum: any) => datum.location_id === locationId)\n    return markerData\n  }\n\n  render() {\n\n    const {\n      position,\n      zoom,\n    } = this.props\n\n    return (\n      <Map\n        center={position}\n        zoom={zoom}\n        scrollWheelZoom={false}\n      >\n        <TileLayer\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n          attribution='&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors'\n        />\n        <MarkerClusterGroup maxClusterRadius={50}>\n          {\n            this.getLocations().map((location: any) => (\n              <Marker\n                position={location.gps}\n                icon={defaultMarkericon}\n                onClick={() => this.getMarkerData(location.id)}\n              >\n                <Popup maxWidth={1000} autoClose={false} closeOnClick={false}>\n                  <div style={{width: '400px'}}>\n                    <MarkerTable\n                      data={this.getMarkerData(location.id)}\n                    />\n                  </div>\n                </Popup>\n              </Marker>\n            ))\n          }\n        </MarkerClusterGroup>\n      </Map>\n    )\n  }\n}\n\nexport default GeoMap\n","import React from 'react'\nimport { MenuItem, FormGroup } from '@blueprintjs/core'\nimport { ItemRenderer, ItemPredicate, Suggest } from '@blueprintjs/select'\nimport './hcpcsCodeSuggest.scss'\n\n\ninterface HcpcsCode {\n  code: string;\n  description: string;\n}\n\nconst HcpcsCodeRenderer: ItemRenderer<HcpcsCode> = (hcpcsCode, { handleClick, modifiers }) => {\n  if (!modifiers.matchesPredicate) {\n    return null\n  }\n\n  function renderDescription(desc: string) {\n    if (desc.length > 100) {\n      return `${desc.slice(0,100)}...`\n    } else {\n      return desc\n    }\n  }\n\n  return (\n    <MenuItem\n      active={modifiers.active}\n      id={hcpcsCode.code}\n      key={hcpcsCode.code}\n      label={renderDescription(hcpcsCode.description)}\n      text={hcpcsCode.code}\n      onClick={handleClick}\n    />\n  )\n}\n\nconst hcpcsCodeFilter: ItemPredicate<HcpcsCode> = (query, hcpcsCode) => {\n  if (isNaN(parseInt(query))) {\n    return hcpcsCode.description.toLowerCase().indexOf(query.toLowerCase()) >= 0\n  }\n  return hcpcsCode.code.indexOf(query) >= 0\n}\n\ninterface Props {\n  hcpcsCodeItems: HcpcsCode[];\n  onItemSelect: (item: HcpcsCode) => void;\n}\n\nconst HcpcsCodeSelect = Suggest.ofType<HcpcsCode>()\n\nconst HcpcsCodeSuggest: React.SFC<Props> = (props) => {\n  const {\n    hcpcsCodeItems,\n    onItemSelect,\n  } = props\n\n  return (\n    <FormGroup\n      label='HCPCS Code Search'\n      helperText='Search by HCPCS code or a description'\n    >\n      <HcpcsCodeSelect\n        items={hcpcsCodeItems}\n        resetOnSelect\n        itemRenderer={HcpcsCodeRenderer}\n        itemPredicate={hcpcsCodeFilter}\n        inputValueRenderer={(item) => `${item.code} - ${item.description}`}\n        onItemSelect={onItemSelect}\n        noResults={<MenuItem text='No Results' disabled />}\n        fill\n      />\n    </FormGroup>\n  )\n}\n\nexport default HcpcsCodeSuggest\n","import React from 'react'\nimport Table from './table'\n\nconst currencyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2,\n})\n\ninterface Props {\n  data: any;\n  height: any;\n  onRowClick: any;\n}\n\n\nconst ChargeTable: React.SFC<Props> = (props) => {\n  const {\n    data,\n    height,\n    onRowClick,\n  } = props\n\n  const columns= React.useMemo(() => [\n    {\n      Header: `Provider Charge Record (${data.length})`,\n      align: 'center',\n      columns: [\n        {\n          Header: 'NPI',\n          accessor: 'npi',\n          align: 'center',\n          width: 1,\n        },\n        {\n          Header: 'Name',\n          accessor: 'name',\n          align: 'center',\n          width: 1,\n        },\n        {\n          Header: 'Credentials',\n          accessor: 'credentials',\n          align: 'center',\n          width: 1,\n        },\n        {\n          Header: 'Charge Amt',\n          accessor: 'submittedCharge',\n          align: 'center',\n          width: 1,\n          Cell: (cell: any) => currencyFormatter.format(cell.value)\n        },\n        {\n          Header: 'Medicare Reimb Amt',\n          accessor: 'paymentAmt',\n          align: 'center',\n          width: 1,\n          Cell: (cell: any) => currencyFormatter.format(cell.value)\n        }\n      ]\n    }\n  ], [data])\n\n  return (\n    <Table minWidth='500px' columns={columns} data={data} height={height} onRowClick={onRowClick}/>\n  )\n}\n\nexport default ChargeTable\n","import React, { useState } from 'react';\nimport {\n  Navbar,\n  Card,\n  Elevation,\n  Button,\n} from '@blueprintjs/core'\nimport './App.scss';\n\nimport hcpcs_data from './data/hcpcs.json'\nimport charge_data from './data/charges.json'\nimport provider_data from './data/providers.json'\nimport location_data from './data/locations.json'\n\nimport GeoMap from './components/map'\nimport HcpcsCodeSuggest from './components/hcpcsCodeSuggest'\nimport ChargeTable from './components/chargeTable'\n\nconst { Heading, Divider, Group } = Navbar\n\nfunction App() {\n\n  const [filteredData, setFilteredData] = useState([])\n  const [position, setPosition] = useState([44, -121])\n  const [zoom, setZoom] = useState(6)\n\n  return (\n    <div className=\"App\">\n      <Navbar>\n        <Group>\n          <Heading>Medimap-Lite</Heading>\n          <Divider />\n          <div className='nav-icon'>\n            <a href=\"https://github.com/yevgenybulochnik\">\n              <img src={process.env.PUBLIC_URL + '/github.png'} alt=\"github\" />\n            </a>\n          </div>\n          <div className='nav-icon'>\n            <a href=\"https://www.linkedin.com/in/yevgeny-eugene-bulochnik-b429a6155/\">\n              <img src={process.env.PUBLIC_URL + '/linkedin.png'} alt=\"linkedin\" />\n            </a>\n          </div>\n          <div className='nav-icon'>\n            <a href=\"https://yevgenybulochnik.com\">\n              <img\n                className='headshot'\n                src='https://assets.yevgenybulochnik.com/headshot.jpeg'\n                alt=\"home\"\n              />\n            </a>\n          </div>\n        </Group>\n      </Navbar>\n      <div className='content'>\n        <Card elevation={Elevation.TWO}>\n          <HcpcsCodeSuggest\n            hcpcsCodeItems={hcpcs_data}\n            onItemSelect={(item: any) => {\n              const data = charge_data.filter((datum: any) => datum.code === item.code)\n              const mergedData = data.map((datum: any) => {\n                const provider = provider_data.filter((d: any) => datum.npi === d.npi )\n                return {...datum, ...provider[0]}\n              })\n              setFilteredData(mergedData as any)\n            }}\n          />\n        </Card>\n        <Card className='geomap-card' elevation={Elevation.TWO}>\n          <GeoMap\n            position={position}\n            zoom={zoom}\n            data={filteredData}\n            locationData={location_data}\n          />\n        </Card>\n        <Card elevation={Elevation.TWO}>\n          <div className='table-container'>\n            <ChargeTable\n              data={filteredData}\n              height='300px'\n              onRowClick={(e: any) => {\n                const location = location_data.filter((loc: any) => loc.id === e.location_id)\n                setZoom(15)\n                setPosition(location[0].gps)\n              }}\n            />\n          </div>\n        </Card>\n      </div>\n      <footer>\n        <div className=\"icon-tray\">\n          <Button minimal>\n            <a href=\"https://github.com/yevgenybulochnik\">Github</a>\n          </Button>\n          <Button minimal>\n            <a href=\"https://linkedin.com/in/yevgeny-eugene-bulochnik-b429a6155\">\n              LinkedIn\n            </a>\n          </Button>\n          <Button minimal>\n            <a href=\"https://yevgenybulochnik.com/contact\">Contact</a>\n          </Button>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}